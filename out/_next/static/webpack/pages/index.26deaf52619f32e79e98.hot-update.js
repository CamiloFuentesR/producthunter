webpackHotUpdate_N_E("pages/index",{

/***/ "./components/layouts/DetallesProducto.jsx":
/*!*************************************************!*\
  !*** ./components/layouts/DetallesProducto.jsx ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var C_Users_Camilo_Desktop_camilo_react_estudio_pryectos_de_juan_producthuntnext_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/slicedToArray */ "./node_modules/@babel/runtime/helpers/esm/slicedToArray.js");
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @emotion/styled/base */ "./node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var date_fns_formatDistanceToNow__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! date-fns/formatDistanceToNow */ "./node_modules/date-fns/formatDistanceToNow/index.js");
/* harmony import */ var date_fns_formatDistanceToNow__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(date_fns_formatDistanceToNow__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var date_fns_locale__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! date-fns/locale */ "./node_modules/date-fns/locale/index.js");
/* harmony import */ var date_fns_locale__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(date_fns_locale__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _hooks_useOnScreen__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../hooks/useOnScreen */ "./hooks/useOnScreen.jsx");
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @emotion/react */ "./node_modules/@emotion/react/dist/emotion-react.browser.esm.js");



var _jsxFileName = "C:\\Users\\Camilo\\Desktop\\camilo\\react-estudio\\pryectos-de-juan\\producthuntnext\\components\\layouts\\DetallesProducto.jsx",
    _this = undefined,
    _s = $RefreshSig$();

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }








var Producto = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_1__["default"])("li", {
  target: "e1s63vuv6",
  label: "Producto"
})(false ? undefined : {
  name: "36ksfm",
  styles: "@media (max-width: 400px){display:flex;flex-direction:column;border-bottom:2px solid grey;margin-top:50px!important;}@media (min-width: 1000px){padding:4rem;display:flex;justify-content:space-between;align-items:center;border:1px solid #e1e1e1;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQ2FtaWxvXFxEZXNrdG9wXFxjYW1pbG9cXHJlYWN0LWVzdHVkaW9cXHByeWVjdG9zLWRlLWp1YW5cXHByb2R1Y3RodW50bmV4dFxcY29tcG9uZW50c1xcbGF5b3V0c1xcRGV0YWxsZXNQcm9kdWN0by5qc3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBTzBCIiwiZmlsZSI6IkM6XFxVc2Vyc1xcQ2FtaWxvXFxEZXNrdG9wXFxjYW1pbG9cXHJlYWN0LWVzdHVkaW9cXHByeWVjdG9zLWRlLWp1YW5cXHByb2R1Y3RodW50bmV4dFxcY29tcG9uZW50c1xcbGF5b3V0c1xcRGV0YWxsZXNQcm9kdWN0by5qc3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBmb3JtYXREaXN0YW5jZVRvTm93IGZyb20gJ2RhdGUtZm5zL2Zvcm1hdERpc3RhbmNlVG9Ob3cnO1xyXG5pbXBvcnQgeyBlcyB9IGZyb20gJ2RhdGUtZm5zL2xvY2FsZSc7XHJcbmltcG9ydCBMaW5rIGZyb20gJ25leHQvbGluayc7XHJcbmltcG9ydCB1c2VPblNjcmVlbiBmcm9tICcuLi8uLi9ob29rcy91c2VPblNjcmVlbic7XHJcblxyXG5jb25zdCBQcm9kdWN0byA9IHN0eWxlZC5saWBcclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA0MDBweCl7XHJcbiAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgICAgIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCBncmV5O1xyXG4gICAgICAgIG1hcmdpbi10b3A6IDUwcHggIWltcG9ydGFudDtcclxuICAgIH07XHJcbiAgICBAbWVkaWEgKG1pbi13aWR0aDogMTAwMHB4KXtcclxuICAgICAgICBwYWRkaW5nOiA0cmVtO1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI2UxZTFlMTsgICBcclxuICAgIH1cclxuYDtcclxuXHJcbmNvbnN0IERlc2NyaXBjaW9uUHJvZHVjdG8gPSBzdHlsZWQuZGl2YFxyXG4gICAgZmxleDogMCAxIDYwMHB4O1xyXG4gICAgZGlzcGxheTogZ3JpZDtcclxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDNmcjtcclxuICAgIGdhcDogMnJlbTtcclxuXHJcbiAgICBAbWVkaWEobWF4LXdpZHRoOjQ1MHB4KXtcclxuICAgICAgICBmbGV4OiA1IDUgMzAwcHg7XHJcbiAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgICAgIG1hcmdpbjogMzBweDtcclxuICAgIH1cclxuYDtcclxuXHJcbmNvbnN0IFRpdHVsbyA9IHN0eWxlZC5hYFxyXG4gICAgZm9udC1zaXplOiAycmVtO1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICBtYXJnaW46IDA7XHJcbiAgICAmOmhvdmVye1xyXG4gICAgICAgIGN1cnNvcjpwb2ludGVyO1xyXG4gICAgfVxyXG4gICAgQG1lZGlhKG1heC13aWR0aDo0NTBweCl7XHJcbiAgICAgICAgZm9udC1zaXplOjEuNXJlbTtcclxuICAgIH1cclxuYDtcclxuXHJcbmNvbnN0IFRleHRvRGVzY3JpcGNpb24gPSBzdHlsZWQucGBcclxuICAgIGZvbnQtc2l6ZTogMS42cmVtO1xyXG4gICAgbWFyZ2luOiAwO1xyXG4gICAgY29sb3I6ICM4ODg7XHJcbiAgICBAbWVkaWEobWF4LXdpZHRoOjQ1MHB4KXtcclxuICAgICAgICBmb250LXNpemU6MS40XHJcbiAgICB9XHJcbmA7XHJcblxyXG5jb25zdCBDb21lbnRhcmlvcyA9IHN0eWxlZC5kaXZgXHJcbiAgICBtYXJnaW4tdG9wOiAycmVtO1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBkaXZ7XHJcbiAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNlMWUxZTE7XHJcbiAgICAgICAgcGFkZGluZzogLjNyZW0gMXJlbTtcclxuICAgICAgICBtYXJnaW4tcmlnaHQ6IDJyZW07XHJcbiAgICB9XHJcbiAgICBpbWd7XHJcbiAgICAgICAgd2lkdGg6IDJyZW07XHJcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAycmVtO1xyXG4gICAgfVxyXG4gICAgcHtcclxuICAgICAgICBmb250LXNpemU6IDEuNnJlbTtcclxuICAgICAgICBtYXJnaW4tcmlnaHQ6IDFyZW07XHJcbiAgICAgICAgZm9udC13ZWlnaHQ6IDcwMDtcclxuICAgICAgICAmOmxhc3Qtb2YtdHlwZXtcclxuICAgICAgICAgICAgbWFyZ2luOiAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIEBtZWRpYShtYXgtd2lkdGg6NDUwcHgpe1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG5gO1xyXG5cclxuY29uc3QgVm90b3MgPSBzdHlsZWQuZGl2YFxyXG4gICAgZmxleDogMCAwIGF1dG87XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjZTFlMWUxO1xyXG4gICAgcGFkZGluZzogMXJlbSAzcmVtO1xyXG4gICAgZGl2e1xyXG4gICAgICAgIGZvbnQtc2l6ZTogMnJlbTtcclxuICAgIH1cclxuICAgIHB7XHJcbiAgICAgICAgbWFyZ2luOiAwO1xyXG4gICAgICAgIGZvbnQtc2l6ZTogMnJlbTtcclxuICAgICAgICBmb250LXdlaWdodDogNzAwO1xyXG4gICAgfVxyXG4gICAgQG1lZGlhKG1heC13aWR0aDo0NTBweCl7XHJcbiAgICAgICAgXHJcbiAgICB9XHJcbmA7XHJcblxyXG5jb25zdCBJbWFnZW4gPSBzdHlsZWQuaW1nYFxyXG4gICAgd2lkdGg6IDIwMHB4O1xyXG4gICAgQG1lZGlhKG1heC13aWR0aDogNDUwcHgpe1xyXG4gICAgICAgIHdpZHRoOjUwMHB4O1xyXG4gICAgfVxyXG4gICAgQG1lZGlhKG1heC13aWR0aDo0NTBweCl7XHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG5gO1xyXG5cclxuXHJcbmNvbnN0IERldGFsbGVzUHJvZHVjdG8gPSAoe1xyXG4gICAgaWQsXHJcbiAgICBjb21lbnRhcmlvcyxcclxuICAgIGNyZWFkbyxcclxuICAgIGRlc2NyaXBjaW9uLFxyXG4gICAgZW1wcmVzYSxcclxuICAgIG5vbWJyZSxcclxuICAgIHVybCxcclxuICAgIGltYWdlblVybCxcclxuICAgIHZvdG9zXHJcbn0pID0+IHtcclxuICAgIGNvbnN0IFtzZXRSZWYsIHZpc2libGVdID0gdXNlT25TY3JlZW4oeyB0aHJlc2hvbGQ6IC4xIH0pO1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPD5cclxuXHJcbiAgICAgICAgICAgIDxQcm9kdWN0bz5cclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB2aXNpYmxlID8gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPERlc2NyaXBjaW9uUHJvZHVjdG8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEltYWdlbiBzcmM9e2ltYWdlblVybH0gYWx0PVwiXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7LyogcHJvZHVjdG9zIGVzIGVsIG5vYnJlIGRlIGxhIGNhcnBldGEsIHNlIGRlYmUgY3JlYXIgKi99XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxMaW5rIGhyZWY9XCIvcHJvZHVjdG9zL1tpZF1cIiBhcz17YC9wcm9kdWN0b3MvJHtpZH1gfSA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGl0dWxvPntub21icmV9PC9UaXR1bG8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRleHRvRGVzY3JpcGNpb24+e2Rlc2NyaXBjaW9uLnN1YnN0cigwLCAxMDApICsgJy4uLid9PC9UZXh0b0Rlc2NyaXBjaW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q29tZW50YXJpb3M+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiL3N0YXRpYy9pbWcvY29tZW50YXJpby5wbmdcIiBhbHQ9XCJpbWdcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPntjb21lbnRhcmlvcy5sZW5ndGh9IENvbWVudGFyaW9zPC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29tZW50YXJpb3M+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlB1YmxpY2FkbyBoYWNlOiB7Zm9ybWF0RGlzdGFuY2VUb05vdyhuZXcgRGF0ZShjcmVhZG8pLCB7IGxvY2FsZTogZXMgfSl9PC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9EZXNjcmlwY2lvblByb2R1Y3RvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFZvdG9zPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+JiM5NjUwOzwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPnt2b3Rvc308L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1ZvdG9zPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Lz5cclxuICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gcmVmPXtzZXRSZWZ9Pjwvc3Bhbj5cclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICA8L1Byb2R1Y3RvPlxyXG5cclxuXHJcblxyXG4gICAgICAgIDwvPlxyXG4gICAgKVxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IERldGFsbGVzUHJvZHVjdG87Il19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var DescripcionProducto = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_1__["default"])("div", {
  target: "e1s63vuv5",
  label: "DescripcionProducto"
})(false ? undefined : {
  name: "10xk088",
  styles: "flex:0 1 600px;display:grid;grid-template-columns:1fr 3fr;gap:2rem;@media(max-width:450px){flex:5 5 300px;display:flex;flex-direction:column;margin:30px;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQ2FtaWxvXFxEZXNrdG9wXFxjYW1pbG9cXHJlYWN0LWVzdHVkaW9cXHByeWVjdG9zLWRlLWp1YW5cXHByb2R1Y3RodW50bmV4dFxcY29tcG9uZW50c1xcbGF5b3V0c1xcRGV0YWxsZXNQcm9kdWN0by5qc3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBdUJzQyIsImZpbGUiOiJDOlxcVXNlcnNcXENhbWlsb1xcRGVza3RvcFxcY2FtaWxvXFxyZWFjdC1lc3R1ZGlvXFxwcnllY3Rvcy1kZS1qdWFuXFxwcm9kdWN0aHVudG5leHRcXGNvbXBvbmVudHNcXGxheW91dHNcXERldGFsbGVzUHJvZHVjdG8uanN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgZm9ybWF0RGlzdGFuY2VUb05vdyBmcm9tICdkYXRlLWZucy9mb3JtYXREaXN0YW5jZVRvTm93JztcclxuaW1wb3J0IHsgZXMgfSBmcm9tICdkYXRlLWZucy9sb2NhbGUnO1xyXG5pbXBvcnQgTGluayBmcm9tICduZXh0L2xpbmsnO1xyXG5pbXBvcnQgdXNlT25TY3JlZW4gZnJvbSAnLi4vLi4vaG9va3MvdXNlT25TY3JlZW4nO1xyXG5cclxuY29uc3QgUHJvZHVjdG8gPSBzdHlsZWQubGlgXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogNDAwcHgpe1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgICAgICBib3JkZXItYm90dG9tOiAycHggc29saWQgZ3JleTtcclxuICAgICAgICBtYXJnaW4tdG9wOiA1MHB4ICFpbXBvcnRhbnQ7XHJcbiAgICB9O1xyXG4gICAgQG1lZGlhIChtaW4td2lkdGg6IDEwMDBweCl7XHJcbiAgICAgICAgcGFkZGluZzogNHJlbTtcclxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcclxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNlMWUxZTE7ICAgXHJcbiAgICB9XHJcbmA7XHJcblxyXG5jb25zdCBEZXNjcmlwY2lvblByb2R1Y3RvID0gc3R5bGVkLmRpdmBcclxuICAgIGZsZXg6IDAgMSA2MDBweDtcclxuICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAzZnI7XHJcbiAgICBnYXA6IDJyZW07XHJcblxyXG4gICAgQG1lZGlhKG1heC13aWR0aDo0NTBweCl7XHJcbiAgICAgICAgZmxleDogNSA1IDMwMHB4O1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgICAgICBtYXJnaW46IDMwcHg7XHJcbiAgICB9XHJcbmA7XHJcblxyXG5jb25zdCBUaXR1bG8gPSBzdHlsZWQuYWBcclxuICAgIGZvbnQtc2l6ZTogMnJlbTtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgbWFyZ2luOiAwO1xyXG4gICAgJjpob3ZlcntcclxuICAgICAgICBjdXJzb3I6cG9pbnRlcjtcclxuICAgIH1cclxuICAgIEBtZWRpYShtYXgtd2lkdGg6NDUwcHgpe1xyXG4gICAgICAgIGZvbnQtc2l6ZToxLjVyZW07XHJcbiAgICB9XHJcbmA7XHJcblxyXG5jb25zdCBUZXh0b0Rlc2NyaXBjaW9uID0gc3R5bGVkLnBgXHJcbiAgICBmb250LXNpemU6IDEuNnJlbTtcclxuICAgIG1hcmdpbjogMDtcclxuICAgIGNvbG9yOiAjODg4O1xyXG4gICAgQG1lZGlhKG1heC13aWR0aDo0NTBweCl7XHJcbiAgICAgICAgZm9udC1zaXplOjEuNFxyXG4gICAgfVxyXG5gO1xyXG5cclxuY29uc3QgQ29tZW50YXJpb3MgPSBzdHlsZWQuZGl2YFxyXG4gICAgbWFyZ2luLXRvcDogMnJlbTtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgZGl2e1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZTFlMWUxO1xyXG4gICAgICAgIHBhZGRpbmc6IC4zcmVtIDFyZW07XHJcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAycmVtO1xyXG4gICAgfVxyXG4gICAgaW1ne1xyXG4gICAgICAgIHdpZHRoOiAycmVtO1xyXG4gICAgICAgIG1hcmdpbi1yaWdodDogMnJlbTtcclxuICAgIH1cclxuICAgIHB7XHJcbiAgICAgICAgZm9udC1zaXplOiAxLjZyZW07XHJcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAxcmVtO1xyXG4gICAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7XHJcbiAgICAgICAgJjpsYXN0LW9mLXR5cGV7XHJcbiAgICAgICAgICAgIG1hcmdpbjogMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBAbWVkaWEobWF4LXdpZHRoOjQ1MHB4KXtcclxuICAgICAgICBcclxuICAgIH1cclxuYDtcclxuXHJcbmNvbnN0IFZvdG9zID0gc3R5bGVkLmRpdmBcclxuICAgIGZsZXg6IDAgMCBhdXRvO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2UxZTFlMTtcclxuICAgIHBhZGRpbmc6IDFyZW0gM3JlbTtcclxuICAgIGRpdntcclxuICAgICAgICBmb250LXNpemU6IDJyZW07XHJcbiAgICB9XHJcbiAgICBwe1xyXG4gICAgICAgIG1hcmdpbjogMDtcclxuICAgICAgICBmb250LXNpemU6IDJyZW07XHJcbiAgICAgICAgZm9udC13ZWlnaHQ6IDcwMDtcclxuICAgIH1cclxuICAgIEBtZWRpYShtYXgtd2lkdGg6NDUwcHgpe1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG5gO1xyXG5cclxuY29uc3QgSW1hZ2VuID0gc3R5bGVkLmltZ2BcclxuICAgIHdpZHRoOiAyMDBweDtcclxuICAgIEBtZWRpYShtYXgtd2lkdGg6IDQ1MHB4KXtcclxuICAgICAgICB3aWR0aDo1MDBweDtcclxuICAgIH1cclxuICAgIEBtZWRpYShtYXgtd2lkdGg6NDUwcHgpe1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxuYDtcclxuXHJcblxyXG5jb25zdCBEZXRhbGxlc1Byb2R1Y3RvID0gKHtcclxuICAgIGlkLFxyXG4gICAgY29tZW50YXJpb3MsXHJcbiAgICBjcmVhZG8sXHJcbiAgICBkZXNjcmlwY2lvbixcclxuICAgIGVtcHJlc2EsXHJcbiAgICBub21icmUsXHJcbiAgICB1cmwsXHJcbiAgICBpbWFnZW5VcmwsXHJcbiAgICB2b3Rvc1xyXG59KSA9PiB7XHJcbiAgICBjb25zdCBbc2V0UmVmLCB2aXNpYmxlXSA9IHVzZU9uU2NyZWVuKHsgdGhyZXNob2xkOiAuMSB9KTtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDw+XHJcblxyXG4gICAgICAgICAgICA8UHJvZHVjdG8+XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmlzaWJsZSA/IChcclxuICAgICAgICAgICAgICAgICAgICAgICAgPD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxEZXNjcmlwY2lvblByb2R1Y3RvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJbWFnZW4gc3JjPXtpbWFnZW5Vcmx9IGFsdD1cIlwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgey8qIHByb2R1Y3RvcyBlcyBlbCBub2JyZSBkZSBsYSBjYXJwZXRhLCBzZSBkZWJlIGNyZWFyICovfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGluayBocmVmPVwiL3Byb2R1Y3Rvcy9baWRdXCIgYXM9e2AvcHJvZHVjdG9zLyR7aWR9YH0gPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRpdHVsbz57bm9tYnJlfTwvVGl0dWxvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0b0Rlc2NyaXBjaW9uPntkZXNjcmlwY2lvbi5zdWJzdHIoMCwgMTAwKSArICcuLi4nfTwvVGV4dG9EZXNjcmlwY2lvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPENvbWVudGFyaW9zPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cIi9zdGF0aWMvaW1nL2NvbWVudGFyaW8ucG5nXCIgYWx0PVwiaW1nXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57Y29tZW50YXJpb3MubGVuZ3RofSBDb21lbnRhcmlvczwvcD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0NvbWVudGFyaW9zPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5QdWJsaWNhZG8gaGFjZToge2Zvcm1hdERpc3RhbmNlVG9Ob3cobmV3IERhdGUoY3JlYWRvKSwgeyBsb2NhbGU6IGVzIH0pfTwvcD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvRGVzY3JpcGNpb25Qcm9kdWN0bz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxWb3Rvcz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PiYjOTY1MDs8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57dm90b3N9PC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9Wb3Rvcz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC8+XHJcbiAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHJlZj17c2V0UmVmfT48L3NwYW4+XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgPC9Qcm9kdWN0bz5cclxuXHJcblxyXG5cclxuICAgICAgICA8Lz5cclxuICAgIClcclxufVxyXG5leHBvcnQgZGVmYXVsdCBEZXRhbGxlc1Byb2R1Y3RvOyJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var Titulo = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_1__["default"])("a", {
  target: "e1s63vuv4",
  label: "Titulo"
})(false ? undefined : {
  name: "x1jumr",
  styles: "font-size:2rem;font-weight:bold;margin:0;&:hover{cursor:pointer;}@media(max-width:450px){font-size:1.5rem;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQ2FtaWxvXFxEZXNrdG9wXFxjYW1pbG9cXHJlYWN0LWVzdHVkaW9cXHByeWVjdG9zLWRlLWp1YW5cXHByb2R1Y3RodW50bmV4dFxcY29tcG9uZW50c1xcbGF5b3V0c1xcRGV0YWxsZXNQcm9kdWN0by5qc3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBcUN1QiIsImZpbGUiOiJDOlxcVXNlcnNcXENhbWlsb1xcRGVza3RvcFxcY2FtaWxvXFxyZWFjdC1lc3R1ZGlvXFxwcnllY3Rvcy1kZS1qdWFuXFxwcm9kdWN0aHVudG5leHRcXGNvbXBvbmVudHNcXGxheW91dHNcXERldGFsbGVzUHJvZHVjdG8uanN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgZm9ybWF0RGlzdGFuY2VUb05vdyBmcm9tICdkYXRlLWZucy9mb3JtYXREaXN0YW5jZVRvTm93JztcclxuaW1wb3J0IHsgZXMgfSBmcm9tICdkYXRlLWZucy9sb2NhbGUnO1xyXG5pbXBvcnQgTGluayBmcm9tICduZXh0L2xpbmsnO1xyXG5pbXBvcnQgdXNlT25TY3JlZW4gZnJvbSAnLi4vLi4vaG9va3MvdXNlT25TY3JlZW4nO1xyXG5cclxuY29uc3QgUHJvZHVjdG8gPSBzdHlsZWQubGlgXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogNDAwcHgpe1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgICAgICBib3JkZXItYm90dG9tOiAycHggc29saWQgZ3JleTtcclxuICAgICAgICBtYXJnaW4tdG9wOiA1MHB4ICFpbXBvcnRhbnQ7XHJcbiAgICB9O1xyXG4gICAgQG1lZGlhIChtaW4td2lkdGg6IDEwMDBweCl7XHJcbiAgICAgICAgcGFkZGluZzogNHJlbTtcclxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcclxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNlMWUxZTE7ICAgXHJcbiAgICB9XHJcbmA7XHJcblxyXG5jb25zdCBEZXNjcmlwY2lvblByb2R1Y3RvID0gc3R5bGVkLmRpdmBcclxuICAgIGZsZXg6IDAgMSA2MDBweDtcclxuICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAzZnI7XHJcbiAgICBnYXA6IDJyZW07XHJcblxyXG4gICAgQG1lZGlhKG1heC13aWR0aDo0NTBweCl7XHJcbiAgICAgICAgZmxleDogNSA1IDMwMHB4O1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgICAgICBtYXJnaW46IDMwcHg7XHJcbiAgICB9XHJcbmA7XHJcblxyXG5jb25zdCBUaXR1bG8gPSBzdHlsZWQuYWBcclxuICAgIGZvbnQtc2l6ZTogMnJlbTtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgbWFyZ2luOiAwO1xyXG4gICAgJjpob3ZlcntcclxuICAgICAgICBjdXJzb3I6cG9pbnRlcjtcclxuICAgIH1cclxuICAgIEBtZWRpYShtYXgtd2lkdGg6NDUwcHgpe1xyXG4gICAgICAgIGZvbnQtc2l6ZToxLjVyZW07XHJcbiAgICB9XHJcbmA7XHJcblxyXG5jb25zdCBUZXh0b0Rlc2NyaXBjaW9uID0gc3R5bGVkLnBgXHJcbiAgICBmb250LXNpemU6IDEuNnJlbTtcclxuICAgIG1hcmdpbjogMDtcclxuICAgIGNvbG9yOiAjODg4O1xyXG4gICAgQG1lZGlhKG1heC13aWR0aDo0NTBweCl7XHJcbiAgICAgICAgZm9udC1zaXplOjEuNFxyXG4gICAgfVxyXG5gO1xyXG5cclxuY29uc3QgQ29tZW50YXJpb3MgPSBzdHlsZWQuZGl2YFxyXG4gICAgbWFyZ2luLXRvcDogMnJlbTtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgZGl2e1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZTFlMWUxO1xyXG4gICAgICAgIHBhZGRpbmc6IC4zcmVtIDFyZW07XHJcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAycmVtO1xyXG4gICAgfVxyXG4gICAgaW1ne1xyXG4gICAgICAgIHdpZHRoOiAycmVtO1xyXG4gICAgICAgIG1hcmdpbi1yaWdodDogMnJlbTtcclxuICAgIH1cclxuICAgIHB7XHJcbiAgICAgICAgZm9udC1zaXplOiAxLjZyZW07XHJcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAxcmVtO1xyXG4gICAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7XHJcbiAgICAgICAgJjpsYXN0LW9mLXR5cGV7XHJcbiAgICAgICAgICAgIG1hcmdpbjogMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBAbWVkaWEobWF4LXdpZHRoOjQ1MHB4KXtcclxuICAgICAgICBcclxuICAgIH1cclxuYDtcclxuXHJcbmNvbnN0IFZvdG9zID0gc3R5bGVkLmRpdmBcclxuICAgIGZsZXg6IDAgMCBhdXRvO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2UxZTFlMTtcclxuICAgIHBhZGRpbmc6IDFyZW0gM3JlbTtcclxuICAgIGRpdntcclxuICAgICAgICBmb250LXNpemU6IDJyZW07XHJcbiAgICB9XHJcbiAgICBwe1xyXG4gICAgICAgIG1hcmdpbjogMDtcclxuICAgICAgICBmb250LXNpemU6IDJyZW07XHJcbiAgICAgICAgZm9udC13ZWlnaHQ6IDcwMDtcclxuICAgIH1cclxuICAgIEBtZWRpYShtYXgtd2lkdGg6NDUwcHgpe1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG5gO1xyXG5cclxuY29uc3QgSW1hZ2VuID0gc3R5bGVkLmltZ2BcclxuICAgIHdpZHRoOiAyMDBweDtcclxuICAgIEBtZWRpYShtYXgtd2lkdGg6IDQ1MHB4KXtcclxuICAgICAgICB3aWR0aDo1MDBweDtcclxuICAgIH1cclxuICAgIEBtZWRpYShtYXgtd2lkdGg6NDUwcHgpe1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxuYDtcclxuXHJcblxyXG5jb25zdCBEZXRhbGxlc1Byb2R1Y3RvID0gKHtcclxuICAgIGlkLFxyXG4gICAgY29tZW50YXJpb3MsXHJcbiAgICBjcmVhZG8sXHJcbiAgICBkZXNjcmlwY2lvbixcclxuICAgIGVtcHJlc2EsXHJcbiAgICBub21icmUsXHJcbiAgICB1cmwsXHJcbiAgICBpbWFnZW5VcmwsXHJcbiAgICB2b3Rvc1xyXG59KSA9PiB7XHJcbiAgICBjb25zdCBbc2V0UmVmLCB2aXNpYmxlXSA9IHVzZU9uU2NyZWVuKHsgdGhyZXNob2xkOiAuMSB9KTtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDw+XHJcblxyXG4gICAgICAgICAgICA8UHJvZHVjdG8+XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmlzaWJsZSA/IChcclxuICAgICAgICAgICAgICAgICAgICAgICAgPD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxEZXNjcmlwY2lvblByb2R1Y3RvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJbWFnZW4gc3JjPXtpbWFnZW5Vcmx9IGFsdD1cIlwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgey8qIHByb2R1Y3RvcyBlcyBlbCBub2JyZSBkZSBsYSBjYXJwZXRhLCBzZSBkZWJlIGNyZWFyICovfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGluayBocmVmPVwiL3Byb2R1Y3Rvcy9baWRdXCIgYXM9e2AvcHJvZHVjdG9zLyR7aWR9YH0gPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRpdHVsbz57bm9tYnJlfTwvVGl0dWxvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0b0Rlc2NyaXBjaW9uPntkZXNjcmlwY2lvbi5zdWJzdHIoMCwgMTAwKSArICcuLi4nfTwvVGV4dG9EZXNjcmlwY2lvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPENvbWVudGFyaW9zPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cIi9zdGF0aWMvaW1nL2NvbWVudGFyaW8ucG5nXCIgYWx0PVwiaW1nXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57Y29tZW50YXJpb3MubGVuZ3RofSBDb21lbnRhcmlvczwvcD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0NvbWVudGFyaW9zPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5QdWJsaWNhZG8gaGFjZToge2Zvcm1hdERpc3RhbmNlVG9Ob3cobmV3IERhdGUoY3JlYWRvKSwgeyBsb2NhbGU6IGVzIH0pfTwvcD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvRGVzY3JpcGNpb25Qcm9kdWN0bz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxWb3Rvcz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PiYjOTY1MDs8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57dm90b3N9PC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9Wb3Rvcz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC8+XHJcbiAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHJlZj17c2V0UmVmfT48L3NwYW4+XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgPC9Qcm9kdWN0bz5cclxuXHJcblxyXG5cclxuICAgICAgICA8Lz5cclxuICAgIClcclxufVxyXG5leHBvcnQgZGVmYXVsdCBEZXRhbGxlc1Byb2R1Y3RvOyJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var TextoDescripcion = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_1__["default"])("p", {
  target: "e1s63vuv3",
  label: "TextoDescripcion"
})(false ? undefined : {
  name: "125lz0x",
  styles: "font-size:1.6rem;margin:0;color:#888;@media(max-width:450px){font-size:1.4;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQ2FtaWxvXFxEZXNrdG9wXFxjYW1pbG9cXHJlYWN0LWVzdHVkaW9cXHByeWVjdG9zLWRlLWp1YW5cXHByb2R1Y3RodW50bmV4dFxcY29tcG9uZW50c1xcbGF5b3V0c1xcRGV0YWxsZXNQcm9kdWN0by5qc3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaURpQyIsImZpbGUiOiJDOlxcVXNlcnNcXENhbWlsb1xcRGVza3RvcFxcY2FtaWxvXFxyZWFjdC1lc3R1ZGlvXFxwcnllY3Rvcy1kZS1qdWFuXFxwcm9kdWN0aHVudG5leHRcXGNvbXBvbmVudHNcXGxheW91dHNcXERldGFsbGVzUHJvZHVjdG8uanN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgZm9ybWF0RGlzdGFuY2VUb05vdyBmcm9tICdkYXRlLWZucy9mb3JtYXREaXN0YW5jZVRvTm93JztcclxuaW1wb3J0IHsgZXMgfSBmcm9tICdkYXRlLWZucy9sb2NhbGUnO1xyXG5pbXBvcnQgTGluayBmcm9tICduZXh0L2xpbmsnO1xyXG5pbXBvcnQgdXNlT25TY3JlZW4gZnJvbSAnLi4vLi4vaG9va3MvdXNlT25TY3JlZW4nO1xyXG5cclxuY29uc3QgUHJvZHVjdG8gPSBzdHlsZWQubGlgXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogNDAwcHgpe1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgICAgICBib3JkZXItYm90dG9tOiAycHggc29saWQgZ3JleTtcclxuICAgICAgICBtYXJnaW4tdG9wOiA1MHB4ICFpbXBvcnRhbnQ7XHJcbiAgICB9O1xyXG4gICAgQG1lZGlhIChtaW4td2lkdGg6IDEwMDBweCl7XHJcbiAgICAgICAgcGFkZGluZzogNHJlbTtcclxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcclxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNlMWUxZTE7ICAgXHJcbiAgICB9XHJcbmA7XHJcblxyXG5jb25zdCBEZXNjcmlwY2lvblByb2R1Y3RvID0gc3R5bGVkLmRpdmBcclxuICAgIGZsZXg6IDAgMSA2MDBweDtcclxuICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAzZnI7XHJcbiAgICBnYXA6IDJyZW07XHJcblxyXG4gICAgQG1lZGlhKG1heC13aWR0aDo0NTBweCl7XHJcbiAgICAgICAgZmxleDogNSA1IDMwMHB4O1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgICAgICBtYXJnaW46IDMwcHg7XHJcbiAgICB9XHJcbmA7XHJcblxyXG5jb25zdCBUaXR1bG8gPSBzdHlsZWQuYWBcclxuICAgIGZvbnQtc2l6ZTogMnJlbTtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgbWFyZ2luOiAwO1xyXG4gICAgJjpob3ZlcntcclxuICAgICAgICBjdXJzb3I6cG9pbnRlcjtcclxuICAgIH1cclxuICAgIEBtZWRpYShtYXgtd2lkdGg6NDUwcHgpe1xyXG4gICAgICAgIGZvbnQtc2l6ZToxLjVyZW07XHJcbiAgICB9XHJcbmA7XHJcblxyXG5jb25zdCBUZXh0b0Rlc2NyaXBjaW9uID0gc3R5bGVkLnBgXHJcbiAgICBmb250LXNpemU6IDEuNnJlbTtcclxuICAgIG1hcmdpbjogMDtcclxuICAgIGNvbG9yOiAjODg4O1xyXG4gICAgQG1lZGlhKG1heC13aWR0aDo0NTBweCl7XHJcbiAgICAgICAgZm9udC1zaXplOjEuNFxyXG4gICAgfVxyXG5gO1xyXG5cclxuY29uc3QgQ29tZW50YXJpb3MgPSBzdHlsZWQuZGl2YFxyXG4gICAgbWFyZ2luLXRvcDogMnJlbTtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgZGl2e1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZTFlMWUxO1xyXG4gICAgICAgIHBhZGRpbmc6IC4zcmVtIDFyZW07XHJcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAycmVtO1xyXG4gICAgfVxyXG4gICAgaW1ne1xyXG4gICAgICAgIHdpZHRoOiAycmVtO1xyXG4gICAgICAgIG1hcmdpbi1yaWdodDogMnJlbTtcclxuICAgIH1cclxuICAgIHB7XHJcbiAgICAgICAgZm9udC1zaXplOiAxLjZyZW07XHJcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAxcmVtO1xyXG4gICAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7XHJcbiAgICAgICAgJjpsYXN0LW9mLXR5cGV7XHJcbiAgICAgICAgICAgIG1hcmdpbjogMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBAbWVkaWEobWF4LXdpZHRoOjQ1MHB4KXtcclxuICAgICAgICBcclxuICAgIH1cclxuYDtcclxuXHJcbmNvbnN0IFZvdG9zID0gc3R5bGVkLmRpdmBcclxuICAgIGZsZXg6IDAgMCBhdXRvO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2UxZTFlMTtcclxuICAgIHBhZGRpbmc6IDFyZW0gM3JlbTtcclxuICAgIGRpdntcclxuICAgICAgICBmb250LXNpemU6IDJyZW07XHJcbiAgICB9XHJcbiAgICBwe1xyXG4gICAgICAgIG1hcmdpbjogMDtcclxuICAgICAgICBmb250LXNpemU6IDJyZW07XHJcbiAgICAgICAgZm9udC13ZWlnaHQ6IDcwMDtcclxuICAgIH1cclxuICAgIEBtZWRpYShtYXgtd2lkdGg6NDUwcHgpe1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG5gO1xyXG5cclxuY29uc3QgSW1hZ2VuID0gc3R5bGVkLmltZ2BcclxuICAgIHdpZHRoOiAyMDBweDtcclxuICAgIEBtZWRpYShtYXgtd2lkdGg6IDQ1MHB4KXtcclxuICAgICAgICB3aWR0aDo1MDBweDtcclxuICAgIH1cclxuICAgIEBtZWRpYShtYXgtd2lkdGg6NDUwcHgpe1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxuYDtcclxuXHJcblxyXG5jb25zdCBEZXRhbGxlc1Byb2R1Y3RvID0gKHtcclxuICAgIGlkLFxyXG4gICAgY29tZW50YXJpb3MsXHJcbiAgICBjcmVhZG8sXHJcbiAgICBkZXNjcmlwY2lvbixcclxuICAgIGVtcHJlc2EsXHJcbiAgICBub21icmUsXHJcbiAgICB1cmwsXHJcbiAgICBpbWFnZW5VcmwsXHJcbiAgICB2b3Rvc1xyXG59KSA9PiB7XHJcbiAgICBjb25zdCBbc2V0UmVmLCB2aXNpYmxlXSA9IHVzZU9uU2NyZWVuKHsgdGhyZXNob2xkOiAuMSB9KTtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDw+XHJcblxyXG4gICAgICAgICAgICA8UHJvZHVjdG8+XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmlzaWJsZSA/IChcclxuICAgICAgICAgICAgICAgICAgICAgICAgPD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxEZXNjcmlwY2lvblByb2R1Y3RvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJbWFnZW4gc3JjPXtpbWFnZW5Vcmx9IGFsdD1cIlwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgey8qIHByb2R1Y3RvcyBlcyBlbCBub2JyZSBkZSBsYSBjYXJwZXRhLCBzZSBkZWJlIGNyZWFyICovfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGluayBocmVmPVwiL3Byb2R1Y3Rvcy9baWRdXCIgYXM9e2AvcHJvZHVjdG9zLyR7aWR9YH0gPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRpdHVsbz57bm9tYnJlfTwvVGl0dWxvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0b0Rlc2NyaXBjaW9uPntkZXNjcmlwY2lvbi5zdWJzdHIoMCwgMTAwKSArICcuLi4nfTwvVGV4dG9EZXNjcmlwY2lvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPENvbWVudGFyaW9zPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cIi9zdGF0aWMvaW1nL2NvbWVudGFyaW8ucG5nXCIgYWx0PVwiaW1nXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57Y29tZW50YXJpb3MubGVuZ3RofSBDb21lbnRhcmlvczwvcD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0NvbWVudGFyaW9zPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5QdWJsaWNhZG8gaGFjZToge2Zvcm1hdERpc3RhbmNlVG9Ob3cobmV3IERhdGUoY3JlYWRvKSwgeyBsb2NhbGU6IGVzIH0pfTwvcD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvRGVzY3JpcGNpb25Qcm9kdWN0bz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxWb3Rvcz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PiYjOTY1MDs8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57dm90b3N9PC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9Wb3Rvcz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC8+XHJcbiAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHJlZj17c2V0UmVmfT48L3NwYW4+XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgPC9Qcm9kdWN0bz5cclxuXHJcblxyXG5cclxuICAgICAgICA8Lz5cclxuICAgIClcclxufVxyXG5leHBvcnQgZGVmYXVsdCBEZXRhbGxlc1Byb2R1Y3RvOyJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var Comentarios = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_1__["default"])("div", {
  target: "e1s63vuv2",
  label: "Comentarios"
})(false ? undefined : {
  name: "1a06tas",
  styles: "margin-top:2rem;display:flex;align-items:center;div{display:flex;align-items:center;border:1px solid #e1e1e1;padding:.3rem 1rem;margin-right:2rem;}img{width:2rem;margin-right:2rem;}p{font-size:1.6rem;margin-right:1rem;font-weight:700;&:last-of-type{margin:0;}}@media(max-width:450px){}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQ2FtaWxvXFxEZXNrdG9wXFxjYW1pbG9cXHJlYWN0LWVzdHVkaW9cXHByeWVjdG9zLWRlLWp1YW5cXHByb2R1Y3RodW50bmV4dFxcY29tcG9uZW50c1xcbGF5b3V0c1xcRGV0YWxsZXNQcm9kdWN0by5qc3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMEQ4QiIsImZpbGUiOiJDOlxcVXNlcnNcXENhbWlsb1xcRGVza3RvcFxcY2FtaWxvXFxyZWFjdC1lc3R1ZGlvXFxwcnllY3Rvcy1kZS1qdWFuXFxwcm9kdWN0aHVudG5leHRcXGNvbXBvbmVudHNcXGxheW91dHNcXERldGFsbGVzUHJvZHVjdG8uanN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgZm9ybWF0RGlzdGFuY2VUb05vdyBmcm9tICdkYXRlLWZucy9mb3JtYXREaXN0YW5jZVRvTm93JztcclxuaW1wb3J0IHsgZXMgfSBmcm9tICdkYXRlLWZucy9sb2NhbGUnO1xyXG5pbXBvcnQgTGluayBmcm9tICduZXh0L2xpbmsnO1xyXG5pbXBvcnQgdXNlT25TY3JlZW4gZnJvbSAnLi4vLi4vaG9va3MvdXNlT25TY3JlZW4nO1xyXG5cclxuY29uc3QgUHJvZHVjdG8gPSBzdHlsZWQubGlgXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogNDAwcHgpe1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgICAgICBib3JkZXItYm90dG9tOiAycHggc29saWQgZ3JleTtcclxuICAgICAgICBtYXJnaW4tdG9wOiA1MHB4ICFpbXBvcnRhbnQ7XHJcbiAgICB9O1xyXG4gICAgQG1lZGlhIChtaW4td2lkdGg6IDEwMDBweCl7XHJcbiAgICAgICAgcGFkZGluZzogNHJlbTtcclxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcclxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNlMWUxZTE7ICAgXHJcbiAgICB9XHJcbmA7XHJcblxyXG5jb25zdCBEZXNjcmlwY2lvblByb2R1Y3RvID0gc3R5bGVkLmRpdmBcclxuICAgIGZsZXg6IDAgMSA2MDBweDtcclxuICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAzZnI7XHJcbiAgICBnYXA6IDJyZW07XHJcblxyXG4gICAgQG1lZGlhKG1heC13aWR0aDo0NTBweCl7XHJcbiAgICAgICAgZmxleDogNSA1IDMwMHB4O1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgICAgICBtYXJnaW46IDMwcHg7XHJcbiAgICB9XHJcbmA7XHJcblxyXG5jb25zdCBUaXR1bG8gPSBzdHlsZWQuYWBcclxuICAgIGZvbnQtc2l6ZTogMnJlbTtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgbWFyZ2luOiAwO1xyXG4gICAgJjpob3ZlcntcclxuICAgICAgICBjdXJzb3I6cG9pbnRlcjtcclxuICAgIH1cclxuICAgIEBtZWRpYShtYXgtd2lkdGg6NDUwcHgpe1xyXG4gICAgICAgIGZvbnQtc2l6ZToxLjVyZW07XHJcbiAgICB9XHJcbmA7XHJcblxyXG5jb25zdCBUZXh0b0Rlc2NyaXBjaW9uID0gc3R5bGVkLnBgXHJcbiAgICBmb250LXNpemU6IDEuNnJlbTtcclxuICAgIG1hcmdpbjogMDtcclxuICAgIGNvbG9yOiAjODg4O1xyXG4gICAgQG1lZGlhKG1heC13aWR0aDo0NTBweCl7XHJcbiAgICAgICAgZm9udC1zaXplOjEuNFxyXG4gICAgfVxyXG5gO1xyXG5cclxuY29uc3QgQ29tZW50YXJpb3MgPSBzdHlsZWQuZGl2YFxyXG4gICAgbWFyZ2luLXRvcDogMnJlbTtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgZGl2e1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZTFlMWUxO1xyXG4gICAgICAgIHBhZGRpbmc6IC4zcmVtIDFyZW07XHJcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAycmVtO1xyXG4gICAgfVxyXG4gICAgaW1ne1xyXG4gICAgICAgIHdpZHRoOiAycmVtO1xyXG4gICAgICAgIG1hcmdpbi1yaWdodDogMnJlbTtcclxuICAgIH1cclxuICAgIHB7XHJcbiAgICAgICAgZm9udC1zaXplOiAxLjZyZW07XHJcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAxcmVtO1xyXG4gICAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7XHJcbiAgICAgICAgJjpsYXN0LW9mLXR5cGV7XHJcbiAgICAgICAgICAgIG1hcmdpbjogMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBAbWVkaWEobWF4LXdpZHRoOjQ1MHB4KXtcclxuICAgICAgICBcclxuICAgIH1cclxuYDtcclxuXHJcbmNvbnN0IFZvdG9zID0gc3R5bGVkLmRpdmBcclxuICAgIGZsZXg6IDAgMCBhdXRvO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2UxZTFlMTtcclxuICAgIHBhZGRpbmc6IDFyZW0gM3JlbTtcclxuICAgIGRpdntcclxuICAgICAgICBmb250LXNpemU6IDJyZW07XHJcbiAgICB9XHJcbiAgICBwe1xyXG4gICAgICAgIG1hcmdpbjogMDtcclxuICAgICAgICBmb250LXNpemU6IDJyZW07XHJcbiAgICAgICAgZm9udC13ZWlnaHQ6IDcwMDtcclxuICAgIH1cclxuICAgIEBtZWRpYShtYXgtd2lkdGg6NDUwcHgpe1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG5gO1xyXG5cclxuY29uc3QgSW1hZ2VuID0gc3R5bGVkLmltZ2BcclxuICAgIHdpZHRoOiAyMDBweDtcclxuICAgIEBtZWRpYShtYXgtd2lkdGg6IDQ1MHB4KXtcclxuICAgICAgICB3aWR0aDo1MDBweDtcclxuICAgIH1cclxuICAgIEBtZWRpYShtYXgtd2lkdGg6NDUwcHgpe1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxuYDtcclxuXHJcblxyXG5jb25zdCBEZXRhbGxlc1Byb2R1Y3RvID0gKHtcclxuICAgIGlkLFxyXG4gICAgY29tZW50YXJpb3MsXHJcbiAgICBjcmVhZG8sXHJcbiAgICBkZXNjcmlwY2lvbixcclxuICAgIGVtcHJlc2EsXHJcbiAgICBub21icmUsXHJcbiAgICB1cmwsXHJcbiAgICBpbWFnZW5VcmwsXHJcbiAgICB2b3Rvc1xyXG59KSA9PiB7XHJcbiAgICBjb25zdCBbc2V0UmVmLCB2aXNpYmxlXSA9IHVzZU9uU2NyZWVuKHsgdGhyZXNob2xkOiAuMSB9KTtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDw+XHJcblxyXG4gICAgICAgICAgICA8UHJvZHVjdG8+XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmlzaWJsZSA/IChcclxuICAgICAgICAgICAgICAgICAgICAgICAgPD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxEZXNjcmlwY2lvblByb2R1Y3RvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJbWFnZW4gc3JjPXtpbWFnZW5Vcmx9IGFsdD1cIlwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgey8qIHByb2R1Y3RvcyBlcyBlbCBub2JyZSBkZSBsYSBjYXJwZXRhLCBzZSBkZWJlIGNyZWFyICovfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGluayBocmVmPVwiL3Byb2R1Y3Rvcy9baWRdXCIgYXM9e2AvcHJvZHVjdG9zLyR7aWR9YH0gPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRpdHVsbz57bm9tYnJlfTwvVGl0dWxvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0b0Rlc2NyaXBjaW9uPntkZXNjcmlwY2lvbi5zdWJzdHIoMCwgMTAwKSArICcuLi4nfTwvVGV4dG9EZXNjcmlwY2lvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPENvbWVudGFyaW9zPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cIi9zdGF0aWMvaW1nL2NvbWVudGFyaW8ucG5nXCIgYWx0PVwiaW1nXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57Y29tZW50YXJpb3MubGVuZ3RofSBDb21lbnRhcmlvczwvcD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0NvbWVudGFyaW9zPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5QdWJsaWNhZG8gaGFjZToge2Zvcm1hdERpc3RhbmNlVG9Ob3cobmV3IERhdGUoY3JlYWRvKSwgeyBsb2NhbGU6IGVzIH0pfTwvcD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvRGVzY3JpcGNpb25Qcm9kdWN0bz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxWb3Rvcz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PiYjOTY1MDs8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57dm90b3N9PC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9Wb3Rvcz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC8+XHJcbiAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHJlZj17c2V0UmVmfT48L3NwYW4+XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgPC9Qcm9kdWN0bz5cclxuXHJcblxyXG5cclxuICAgICAgICA8Lz5cclxuICAgIClcclxufVxyXG5leHBvcnQgZGVmYXVsdCBEZXRhbGxlc1Byb2R1Y3RvOyJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var Votos = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_1__["default"])("div", {
  target: "e1s63vuv1",
  label: "Votos"
})(false ? undefined : {
  name: "mut4qb",
  styles: "flex:0 0 auto;text-align:center;border:1px solid #e1e1e1;padding:1rem 3rem;div{font-size:2rem;}p{margin:0;font-size:2rem;font-weight:700;}@media(max-width:450px){}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQ2FtaWxvXFxEZXNrdG9wXFxjYW1pbG9cXHJlYWN0LWVzdHVkaW9cXHByeWVjdG9zLWRlLWp1YW5cXHByb2R1Y3RodW50bmV4dFxcY29tcG9uZW50c1xcbGF5b3V0c1xcRGV0YWxsZXNQcm9kdWN0by5qc3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0Z3QiIsImZpbGUiOiJDOlxcVXNlcnNcXENhbWlsb1xcRGVza3RvcFxcY2FtaWxvXFxyZWFjdC1lc3R1ZGlvXFxwcnllY3Rvcy1kZS1qdWFuXFxwcm9kdWN0aHVudG5leHRcXGNvbXBvbmVudHNcXGxheW91dHNcXERldGFsbGVzUHJvZHVjdG8uanN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgZm9ybWF0RGlzdGFuY2VUb05vdyBmcm9tICdkYXRlLWZucy9mb3JtYXREaXN0YW5jZVRvTm93JztcclxuaW1wb3J0IHsgZXMgfSBmcm9tICdkYXRlLWZucy9sb2NhbGUnO1xyXG5pbXBvcnQgTGluayBmcm9tICduZXh0L2xpbmsnO1xyXG5pbXBvcnQgdXNlT25TY3JlZW4gZnJvbSAnLi4vLi4vaG9va3MvdXNlT25TY3JlZW4nO1xyXG5cclxuY29uc3QgUHJvZHVjdG8gPSBzdHlsZWQubGlgXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogNDAwcHgpe1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgICAgICBib3JkZXItYm90dG9tOiAycHggc29saWQgZ3JleTtcclxuICAgICAgICBtYXJnaW4tdG9wOiA1MHB4ICFpbXBvcnRhbnQ7XHJcbiAgICB9O1xyXG4gICAgQG1lZGlhIChtaW4td2lkdGg6IDEwMDBweCl7XHJcbiAgICAgICAgcGFkZGluZzogNHJlbTtcclxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcclxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNlMWUxZTE7ICAgXHJcbiAgICB9XHJcbmA7XHJcblxyXG5jb25zdCBEZXNjcmlwY2lvblByb2R1Y3RvID0gc3R5bGVkLmRpdmBcclxuICAgIGZsZXg6IDAgMSA2MDBweDtcclxuICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAzZnI7XHJcbiAgICBnYXA6IDJyZW07XHJcblxyXG4gICAgQG1lZGlhKG1heC13aWR0aDo0NTBweCl7XHJcbiAgICAgICAgZmxleDogNSA1IDMwMHB4O1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgICAgICBtYXJnaW46IDMwcHg7XHJcbiAgICB9XHJcbmA7XHJcblxyXG5jb25zdCBUaXR1bG8gPSBzdHlsZWQuYWBcclxuICAgIGZvbnQtc2l6ZTogMnJlbTtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgbWFyZ2luOiAwO1xyXG4gICAgJjpob3ZlcntcclxuICAgICAgICBjdXJzb3I6cG9pbnRlcjtcclxuICAgIH1cclxuICAgIEBtZWRpYShtYXgtd2lkdGg6NDUwcHgpe1xyXG4gICAgICAgIGZvbnQtc2l6ZToxLjVyZW07XHJcbiAgICB9XHJcbmA7XHJcblxyXG5jb25zdCBUZXh0b0Rlc2NyaXBjaW9uID0gc3R5bGVkLnBgXHJcbiAgICBmb250LXNpemU6IDEuNnJlbTtcclxuICAgIG1hcmdpbjogMDtcclxuICAgIGNvbG9yOiAjODg4O1xyXG4gICAgQG1lZGlhKG1heC13aWR0aDo0NTBweCl7XHJcbiAgICAgICAgZm9udC1zaXplOjEuNFxyXG4gICAgfVxyXG5gO1xyXG5cclxuY29uc3QgQ29tZW50YXJpb3MgPSBzdHlsZWQuZGl2YFxyXG4gICAgbWFyZ2luLXRvcDogMnJlbTtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgZGl2e1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZTFlMWUxO1xyXG4gICAgICAgIHBhZGRpbmc6IC4zcmVtIDFyZW07XHJcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAycmVtO1xyXG4gICAgfVxyXG4gICAgaW1ne1xyXG4gICAgICAgIHdpZHRoOiAycmVtO1xyXG4gICAgICAgIG1hcmdpbi1yaWdodDogMnJlbTtcclxuICAgIH1cclxuICAgIHB7XHJcbiAgICAgICAgZm9udC1zaXplOiAxLjZyZW07XHJcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAxcmVtO1xyXG4gICAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7XHJcbiAgICAgICAgJjpsYXN0LW9mLXR5cGV7XHJcbiAgICAgICAgICAgIG1hcmdpbjogMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBAbWVkaWEobWF4LXdpZHRoOjQ1MHB4KXtcclxuICAgICAgICBcclxuICAgIH1cclxuYDtcclxuXHJcbmNvbnN0IFZvdG9zID0gc3R5bGVkLmRpdmBcclxuICAgIGZsZXg6IDAgMCBhdXRvO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2UxZTFlMTtcclxuICAgIHBhZGRpbmc6IDFyZW0gM3JlbTtcclxuICAgIGRpdntcclxuICAgICAgICBmb250LXNpemU6IDJyZW07XHJcbiAgICB9XHJcbiAgICBwe1xyXG4gICAgICAgIG1hcmdpbjogMDtcclxuICAgICAgICBmb250LXNpemU6IDJyZW07XHJcbiAgICAgICAgZm9udC13ZWlnaHQ6IDcwMDtcclxuICAgIH1cclxuICAgIEBtZWRpYShtYXgtd2lkdGg6NDUwcHgpe1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG5gO1xyXG5cclxuY29uc3QgSW1hZ2VuID0gc3R5bGVkLmltZ2BcclxuICAgIHdpZHRoOiAyMDBweDtcclxuICAgIEBtZWRpYShtYXgtd2lkdGg6IDQ1MHB4KXtcclxuICAgICAgICB3aWR0aDo1MDBweDtcclxuICAgIH1cclxuICAgIEBtZWRpYShtYXgtd2lkdGg6NDUwcHgpe1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxuYDtcclxuXHJcblxyXG5jb25zdCBEZXRhbGxlc1Byb2R1Y3RvID0gKHtcclxuICAgIGlkLFxyXG4gICAgY29tZW50YXJpb3MsXHJcbiAgICBjcmVhZG8sXHJcbiAgICBkZXNjcmlwY2lvbixcclxuICAgIGVtcHJlc2EsXHJcbiAgICBub21icmUsXHJcbiAgICB1cmwsXHJcbiAgICBpbWFnZW5VcmwsXHJcbiAgICB2b3Rvc1xyXG59KSA9PiB7XHJcbiAgICBjb25zdCBbc2V0UmVmLCB2aXNpYmxlXSA9IHVzZU9uU2NyZWVuKHsgdGhyZXNob2xkOiAuMSB9KTtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDw+XHJcblxyXG4gICAgICAgICAgICA8UHJvZHVjdG8+XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmlzaWJsZSA/IChcclxuICAgICAgICAgICAgICAgICAgICAgICAgPD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxEZXNjcmlwY2lvblByb2R1Y3RvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJbWFnZW4gc3JjPXtpbWFnZW5Vcmx9IGFsdD1cIlwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgey8qIHByb2R1Y3RvcyBlcyBlbCBub2JyZSBkZSBsYSBjYXJwZXRhLCBzZSBkZWJlIGNyZWFyICovfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGluayBocmVmPVwiL3Byb2R1Y3Rvcy9baWRdXCIgYXM9e2AvcHJvZHVjdG9zLyR7aWR9YH0gPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRpdHVsbz57bm9tYnJlfTwvVGl0dWxvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0b0Rlc2NyaXBjaW9uPntkZXNjcmlwY2lvbi5zdWJzdHIoMCwgMTAwKSArICcuLi4nfTwvVGV4dG9EZXNjcmlwY2lvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPENvbWVudGFyaW9zPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cIi9zdGF0aWMvaW1nL2NvbWVudGFyaW8ucG5nXCIgYWx0PVwiaW1nXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57Y29tZW50YXJpb3MubGVuZ3RofSBDb21lbnRhcmlvczwvcD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0NvbWVudGFyaW9zPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5QdWJsaWNhZG8gaGFjZToge2Zvcm1hdERpc3RhbmNlVG9Ob3cobmV3IERhdGUoY3JlYWRvKSwgeyBsb2NhbGU6IGVzIH0pfTwvcD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvRGVzY3JpcGNpb25Qcm9kdWN0bz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxWb3Rvcz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PiYjOTY1MDs8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57dm90b3N9PC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9Wb3Rvcz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC8+XHJcbiAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHJlZj17c2V0UmVmfT48L3NwYW4+XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgPC9Qcm9kdWN0bz5cclxuXHJcblxyXG5cclxuICAgICAgICA8Lz5cclxuICAgIClcclxufVxyXG5leHBvcnQgZGVmYXVsdCBEZXRhbGxlc1Byb2R1Y3RvOyJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var Imagen = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_1__["default"])("img", {
  target: "e1s63vuv0",
  label: "Imagen"
})(false ? undefined : {
  name: "g6avc1",
  styles: "width:200px;@media(max-width: 450px){width:500px;}@media(max-width:450px){}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQ2FtaWxvXFxEZXNrdG9wXFxjYW1pbG9cXHJlYWN0LWVzdHVkaW9cXHByeWVjdG9zLWRlLWp1YW5cXHByb2R1Y3RodW50bmV4dFxcY29tcG9uZW50c1xcbGF5b3V0c1xcRGV0YWxsZXNQcm9kdWN0by5qc3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBd0d5QiIsImZpbGUiOiJDOlxcVXNlcnNcXENhbWlsb1xcRGVza3RvcFxcY2FtaWxvXFxyZWFjdC1lc3R1ZGlvXFxwcnllY3Rvcy1kZS1qdWFuXFxwcm9kdWN0aHVudG5leHRcXGNvbXBvbmVudHNcXGxheW91dHNcXERldGFsbGVzUHJvZHVjdG8uanN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgZm9ybWF0RGlzdGFuY2VUb05vdyBmcm9tICdkYXRlLWZucy9mb3JtYXREaXN0YW5jZVRvTm93JztcclxuaW1wb3J0IHsgZXMgfSBmcm9tICdkYXRlLWZucy9sb2NhbGUnO1xyXG5pbXBvcnQgTGluayBmcm9tICduZXh0L2xpbmsnO1xyXG5pbXBvcnQgdXNlT25TY3JlZW4gZnJvbSAnLi4vLi4vaG9va3MvdXNlT25TY3JlZW4nO1xyXG5cclxuY29uc3QgUHJvZHVjdG8gPSBzdHlsZWQubGlgXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogNDAwcHgpe1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgICAgICBib3JkZXItYm90dG9tOiAycHggc29saWQgZ3JleTtcclxuICAgICAgICBtYXJnaW4tdG9wOiA1MHB4ICFpbXBvcnRhbnQ7XHJcbiAgICB9O1xyXG4gICAgQG1lZGlhIChtaW4td2lkdGg6IDEwMDBweCl7XHJcbiAgICAgICAgcGFkZGluZzogNHJlbTtcclxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcclxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNlMWUxZTE7ICAgXHJcbiAgICB9XHJcbmA7XHJcblxyXG5jb25zdCBEZXNjcmlwY2lvblByb2R1Y3RvID0gc3R5bGVkLmRpdmBcclxuICAgIGZsZXg6IDAgMSA2MDBweDtcclxuICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAzZnI7XHJcbiAgICBnYXA6IDJyZW07XHJcblxyXG4gICAgQG1lZGlhKG1heC13aWR0aDo0NTBweCl7XHJcbiAgICAgICAgZmxleDogNSA1IDMwMHB4O1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgICAgICBtYXJnaW46IDMwcHg7XHJcbiAgICB9XHJcbmA7XHJcblxyXG5jb25zdCBUaXR1bG8gPSBzdHlsZWQuYWBcclxuICAgIGZvbnQtc2l6ZTogMnJlbTtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgbWFyZ2luOiAwO1xyXG4gICAgJjpob3ZlcntcclxuICAgICAgICBjdXJzb3I6cG9pbnRlcjtcclxuICAgIH1cclxuICAgIEBtZWRpYShtYXgtd2lkdGg6NDUwcHgpe1xyXG4gICAgICAgIGZvbnQtc2l6ZToxLjVyZW07XHJcbiAgICB9XHJcbmA7XHJcblxyXG5jb25zdCBUZXh0b0Rlc2NyaXBjaW9uID0gc3R5bGVkLnBgXHJcbiAgICBmb250LXNpemU6IDEuNnJlbTtcclxuICAgIG1hcmdpbjogMDtcclxuICAgIGNvbG9yOiAjODg4O1xyXG4gICAgQG1lZGlhKG1heC13aWR0aDo0NTBweCl7XHJcbiAgICAgICAgZm9udC1zaXplOjEuNFxyXG4gICAgfVxyXG5gO1xyXG5cclxuY29uc3QgQ29tZW50YXJpb3MgPSBzdHlsZWQuZGl2YFxyXG4gICAgbWFyZ2luLXRvcDogMnJlbTtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgZGl2e1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZTFlMWUxO1xyXG4gICAgICAgIHBhZGRpbmc6IC4zcmVtIDFyZW07XHJcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAycmVtO1xyXG4gICAgfVxyXG4gICAgaW1ne1xyXG4gICAgICAgIHdpZHRoOiAycmVtO1xyXG4gICAgICAgIG1hcmdpbi1yaWdodDogMnJlbTtcclxuICAgIH1cclxuICAgIHB7XHJcbiAgICAgICAgZm9udC1zaXplOiAxLjZyZW07XHJcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAxcmVtO1xyXG4gICAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7XHJcbiAgICAgICAgJjpsYXN0LW9mLXR5cGV7XHJcbiAgICAgICAgICAgIG1hcmdpbjogMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBAbWVkaWEobWF4LXdpZHRoOjQ1MHB4KXtcclxuICAgICAgICBcclxuICAgIH1cclxuYDtcclxuXHJcbmNvbnN0IFZvdG9zID0gc3R5bGVkLmRpdmBcclxuICAgIGZsZXg6IDAgMCBhdXRvO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2UxZTFlMTtcclxuICAgIHBhZGRpbmc6IDFyZW0gM3JlbTtcclxuICAgIGRpdntcclxuICAgICAgICBmb250LXNpemU6IDJyZW07XHJcbiAgICB9XHJcbiAgICBwe1xyXG4gICAgICAgIG1hcmdpbjogMDtcclxuICAgICAgICBmb250LXNpemU6IDJyZW07XHJcbiAgICAgICAgZm9udC13ZWlnaHQ6IDcwMDtcclxuICAgIH1cclxuICAgIEBtZWRpYShtYXgtd2lkdGg6NDUwcHgpe1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG5gO1xyXG5cclxuY29uc3QgSW1hZ2VuID0gc3R5bGVkLmltZ2BcclxuICAgIHdpZHRoOiAyMDBweDtcclxuICAgIEBtZWRpYShtYXgtd2lkdGg6IDQ1MHB4KXtcclxuICAgICAgICB3aWR0aDo1MDBweDtcclxuICAgIH1cclxuICAgIEBtZWRpYShtYXgtd2lkdGg6NDUwcHgpe1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxuYDtcclxuXHJcblxyXG5jb25zdCBEZXRhbGxlc1Byb2R1Y3RvID0gKHtcclxuICAgIGlkLFxyXG4gICAgY29tZW50YXJpb3MsXHJcbiAgICBjcmVhZG8sXHJcbiAgICBkZXNjcmlwY2lvbixcclxuICAgIGVtcHJlc2EsXHJcbiAgICBub21icmUsXHJcbiAgICB1cmwsXHJcbiAgICBpbWFnZW5VcmwsXHJcbiAgICB2b3Rvc1xyXG59KSA9PiB7XHJcbiAgICBjb25zdCBbc2V0UmVmLCB2aXNpYmxlXSA9IHVzZU9uU2NyZWVuKHsgdGhyZXNob2xkOiAuMSB9KTtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDw+XHJcblxyXG4gICAgICAgICAgICA8UHJvZHVjdG8+XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmlzaWJsZSA/IChcclxuICAgICAgICAgICAgICAgICAgICAgICAgPD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxEZXNjcmlwY2lvblByb2R1Y3RvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJbWFnZW4gc3JjPXtpbWFnZW5Vcmx9IGFsdD1cIlwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgey8qIHByb2R1Y3RvcyBlcyBlbCBub2JyZSBkZSBsYSBjYXJwZXRhLCBzZSBkZWJlIGNyZWFyICovfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGluayBocmVmPVwiL3Byb2R1Y3Rvcy9baWRdXCIgYXM9e2AvcHJvZHVjdG9zLyR7aWR9YH0gPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRpdHVsbz57bm9tYnJlfTwvVGl0dWxvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0b0Rlc2NyaXBjaW9uPntkZXNjcmlwY2lvbi5zdWJzdHIoMCwgMTAwKSArICcuLi4nfTwvVGV4dG9EZXNjcmlwY2lvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPENvbWVudGFyaW9zPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cIi9zdGF0aWMvaW1nL2NvbWVudGFyaW8ucG5nXCIgYWx0PVwiaW1nXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57Y29tZW50YXJpb3MubGVuZ3RofSBDb21lbnRhcmlvczwvcD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0NvbWVudGFyaW9zPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5QdWJsaWNhZG8gaGFjZToge2Zvcm1hdERpc3RhbmNlVG9Ob3cobmV3IERhdGUoY3JlYWRvKSwgeyBsb2NhbGU6IGVzIH0pfTwvcD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvRGVzY3JpcGNpb25Qcm9kdWN0bz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxWb3Rvcz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PiYjOTY1MDs8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57dm90b3N9PC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9Wb3Rvcz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC8+XHJcbiAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHJlZj17c2V0UmVmfT48L3NwYW4+XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgPC9Qcm9kdWN0bz5cclxuXHJcblxyXG5cclxuICAgICAgICA8Lz5cclxuICAgIClcclxufVxyXG5leHBvcnQgZGVmYXVsdCBEZXRhbGxlc1Byb2R1Y3RvOyJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var DetallesProducto = function DetallesProducto(_ref) {
  _s();

  var id = _ref.id,
      comentarios = _ref.comentarios,
      creado = _ref.creado,
      descripcion = _ref.descripcion,
      empresa = _ref.empresa,
      nombre = _ref.nombre,
      url = _ref.url,
      imagenUrl = _ref.imagenUrl,
      votos = _ref.votos;

  var _useOnScreen = Object(_hooks_useOnScreen__WEBPACK_IMPORTED_MODULE_6__["default"])({
    threshold: .1
  }),
      _useOnScreen2 = Object(C_Users_Camilo_Desktop_camilo_react_estudio_pryectos_de_juan_producthuntnext_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__["default"])(_useOnScreen, 2),
      setRef = _useOnScreen2[0],
      visible = _useOnScreen2[1];

  return Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(react__WEBPACK_IMPORTED_MODULE_2___default.a.Fragment, null, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(Producto, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 133,
      columnNumber: 13
    }
  }, visible ? Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(react__WEBPACK_IMPORTED_MODULE_2___default.a.Fragment, null, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(DescripcionProducto, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 137,
      columnNumber: 29
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("div", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 138,
      columnNumber: 33
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(Imagen, {
    src: imagenUrl,
    alt: "",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 139,
      columnNumber: 37
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("div", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 141,
      columnNumber: 33
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(next_link__WEBPACK_IMPORTED_MODULE_5___default.a, {
    href: "/productos/[id]",
    as: "/productos/".concat(id),
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 143,
      columnNumber: 37
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(Titulo, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 144,
      columnNumber: 41
    }
  }, nombre)), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(TextoDescripcion, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 146,
      columnNumber: 37
    }
  }, descripcion.substr(0, 100) + '...'), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(Comentarios, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 147,
      columnNumber: 37
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("div", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 148,
      columnNumber: 41
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("img", {
    src: "/static/img/comentario.png",
    alt: "img",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 149,
      columnNumber: 45
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("p", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 150,
      columnNumber: 45
    }
  }, comentarios.length, " Comentarios"))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("p", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 153,
      columnNumber: 37
    }
  }, "Publicado hace: ", date_fns_formatDistanceToNow__WEBPACK_IMPORTED_MODULE_3___default()(new Date(creado), {
    locale: date_fns_locale__WEBPACK_IMPORTED_MODULE_4__["es"]
  })))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(Votos, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 156,
      columnNumber: 29
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("div", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 157,
      columnNumber: 33
    }
  }, "\u25B2"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("p", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 158,
      columnNumber: 33
    }
  }, votos))) : Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("span", {
    ref: setRef,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 163,
      columnNumber: 25
    }
  })));
};

_s(DetallesProducto, "+kAhwHHyYZ2zsSmfe7SN3+uAibI=", false, function () {
  return [_hooks_useOnScreen__WEBPACK_IMPORTED_MODULE_6__["default"]];
});

_c = DetallesProducto;
/* harmony default export */ __webpack_exports__["default"] = (DetallesProducto);

var _c;

$RefreshReg$(_c, "DetallesProducto");

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/next/dist/compiled/webpack/harmony-module.js */ "./node_modules/next/dist/compiled/webpack/harmony-module.js")(module)))

/***/ })

})
//# sourceMappingURL=data:application/json;charset=utf-8;base64,